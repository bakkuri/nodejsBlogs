You need to secure your MongoDB Atlas cluster before you can use it. Set which users and IP addresses can access your cluster now. Read more 

Add a connection IP address
Your current IP address (49.206.52.255) has been added to enable local connectivity. Add another later in 
Network Access
.
Create a database user
This first user will have atlasAdmin  permissions for this project.

We autogenerated a username and password. You can use this or create your own.

You'll need your database user's credentials in the next step. Copy the database user passwor


pkbdevops
CWXcxifApatRBYry

## Connecting with MongoDB for VS Code
1. Install MongoDB for VS Code.
In VS Code, open "Extensions" in the left navigation and search for "MongoDB for VS Code." Select the extension and click install.
2. In VS Code, open the Command Palette.
Click on "View" and open "Command Palette."
Search "MongoDB: Connect" on the Command Palette and click on "Connect with Connection String."
3. Connect to your MongoDB deployment.
Paste your connection string into the Command Palette.

Show Password
mongodb+srv://pkbdevops:CWXcxifApatRBYry@nodetutorial.lxhjuuf.mongodb.net/

The password for pkbdevops is included in the connection string for your first time setup. This password will not be available again after exiting this connect flow.
4. Click “Create New Playground” in MongoDB for VS Code to get started.
Learn more about Playgrounds 


## Connecting with MongoDB Driver
1. Select your driver and version
We recommend installing and using the latest driver version.

Driver

Version

2. Install your driver
Run the following on the command line
npm install mongodb

View MongoDB Node.js Driver installation instructions.
3. Add your connection string into your application code

View full code sample


Show Password

mongodb+srv://pkbdevops:CWXcxifApatRBYry@nodetutorial.lxhjuuf.mongodb.net/?retryWrites=true&w=majority&appName=nodetutorial

The password for pkbdevops is included in the connection string for your first time setup. This password will not be available again after exiting this connect flow.



mongodb+srv://pkbdevops:CWXcxifApatRBYry@nodetutorial.lxhjuuf.mongodb.net/?retryWrites=true&w=majority&appName=nodetutorial

## full code
const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://pkbdevops:CWXcxifApatRBYry@nodetutorial.lxhjuuf.mongodb.net/?retryWrites=true&w=majority&appName=nodetutorial";

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();
    // Send a ping to confirm a successful connection
    await client.db("admin").command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);

#############


## Mongoose to connect MongoDB.
Obj doc mapping lib user to create user and blog model.
npm install mongoose

const dbURI = "mongodb+srv://pkbdevops:CWXcxifApatRBYry@nodetutorial.lxhjuuf.mongodb.net/?retryWrites=true&w=majority&appName=nodetutorial";

mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(result => app.listen(3000))
  .catch(err => console.log(err));


  mongodb+srv://pkbdevops:CWXcxifApatRBYry@nodetutorial.lxhjuuf.mongodb.net/?retryWrites=true&w=majority&appName=nodetutorial